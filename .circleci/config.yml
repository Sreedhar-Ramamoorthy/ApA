# define often used filter
filter_on_master: &filter_on_master
  filters:
    branches:
      only: master

filter_on_uat: &filter_on_uat
  filters:
    branches:
      only: rc

filter_on_dev: &filter_on_dev
  filters:
    branches:
      only: dev

version: 2.1

jobs:
  test:
    docker:
      - image: cimg/openjdk:17.0.8-node
    parallelism: 4
    steps:
      - checkout
      - restore_cache:
          key: health-apis-{{ checksum "pom.xml" }}
      - run: mvn dependency:go-offline
      - save_cache:
          paths:
            - ~/.m2
          key: health-apis-{{ checksum "pom.xml" }}
      - run:
          name: Run test cases
          command: mvn clean org.jacoco:jacoco-maven-plugin:prepare-agent test
      - run:
          name: Analyze on SonarCloud
          command: mvn verify sonar:sonar -Dsonar.projectKey=apanirvana_health-apis -Dsonar.organization=apanirvana -Dsonar.host.url=https://sonarcloud.io
      - store_artifacts:
          path: target/surefire-reports
  build:
    docker:
      - image: circleci/openjdk:14-jdk-buster
    steps:
      - checkout
      - restore_cache:
          key: health-apis-{{ checksum "pom.xml" }}
      - run: mvn dependency:go-offline
      - save_cache:
          paths:
            - ~/.m2
          key: health-apis-{{ checksum "pom.xml" }}
      - run:
          name: Package and generate jar file
          command: mvn package
      - store_artifacts:
          path: health-apis-policy/target/health-apis-policy-0.0.1-SNAPSHOT.jar
      - store_artifacts:
          path: health-apis-service/target/health-apis-service-0.0.1-SNAPSHOT.jar
      - store_artifacts:
          path: health-apis-notification/target/health-apis-notification-0.0.1-SNAPSHOT.jar
      - persist_to_workspace:
          root: ~/project
          paths:
            - health-apis-policy/target/health-apis-policy-0.0.1-SNAPSHOT.jar
            - health-apis-service/target/health-apis-service-0.0.1-SNAPSHOT.jar
            - health-apis-notification/target/health-apis-notification-0.0.1-SNAPSHOT.jar

  dev-docker-build:
    docker:
      - image: docker:stable
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: false
      - attach_workspace:
          at: ~/project
      - run:
          name: Install dependencies
          command: |
            apk add --no-cache py-pip
            pip install awscli==1.16.114
      - run:
          name: Building docker image
          command: |
            cp -r health-apis-policy/target .
            cp -r health-apis-service/target .
            cp -r health-apis-notification/target .
            export AWS_ACCESS_KEY_ID=${AWS_DEV_KEY_ID}
            export AWS_SECRET_ACCESS_KEY=${AWS_DEV_ACCESS_KEY}
            docker build -f health-apis-policy/Dockerfile -t ${AWS_DEV_ECR_ENDPOINT}:health-apis-policy \
            --build-arg DOCKER_SPRING_PROFILES_ACTIVE=dev \
            --no-cache .
            docker build -f health-apis-service/Dockerfile -t ${AWS_DEV_ECR_ENDPOINT}:health-apis-service \
            --build-arg DOCKER_SPRING_PROFILES_ACTIVE=dev \
            --no-cache .
            docker build -f health-apis-notification/Dockerfile -t ${AWS_DEV_ECR_ENDPOINT}:health-apis-notification \
            --build-arg DOCKER_SPRING_PROFILES_ACTIVE=dev \
            --no-cache .
            login=$(aws ecr get-login --no-include-email --region eu-west-1)
            ${login}
            docker push ${AWS_DEV_ECR_ENDPOINT}:health-apis-policy
            docker push ${AWS_DEV_ECR_ENDPOINT}:health-apis-service
            docker push ${AWS_DEV_ECR_ENDPOINT}:health-apis-notification

  dev-docker-deploy:
    docker:
      - image: docker:stable
    steps:
      - run:
          name: Provision Built Image From ECR to ECS
          command: |
            apk add --no-cache py-pip
            apk add --no-cache jq
            pip install awscli==1.16.114
      - run:
          name: This forces the task definition to be re-evaluated and the new container image to be pulled.
          command: |
            export AWS_ACCESS_KEY_ID=${AWS_DEV_KEY_ID}
            export AWS_SECRET_ACCESS_KEY=${AWS_DEV_ACCESS_KEY}
            export ECR_IMAGE=${AWS_DEV_ECR_ENDPOINT}:health-apis-policy
            export TASK_DEFINITION=$(aws ecs describe-task-definition --task-definition health-apis-policy-task-definition --region $AWS_DEFAULT_REGION)
            export NEW_TASK_DEFINITION=$(echo $TASK_DEFINITION | jq --arg IMAGE $ECR_IMAGE '.taskDefinition | .containerDefinitions[0].image = $IMAGE | del(.taskDefinitionArn) | del(.revision) | del(.status) | del(.requiresAttributes) | del(.compatibilities)')
            echo $NEW_TASK_DEFINITION >> policy-task.json
            export NEW_TASK_INFO=$(aws ecs register-task-definition --cli-input-json file://policy-task.json --region $AWS_DEFAULT_REGION)
            export NEW_REVISION=$(echo $NEW_TASK_INFO | jq '.taskDefinition.revision')
            aws ecs update-service \
              --cluster apa-apis-cluster \
              --service health-apis-policy-service \
              --task-definition health-apis-policy-task-definition:$NEW_REVISION \
              --force-new-deployment
      - run:
          name: This forces the task definition to be re-evaluated and the new container image to be pulled.
          command: |
            export AWS_ACCESS_KEY_ID=${AWS_DEV_KEY_ID}
            export AWS_SECRET_ACCESS_KEY=${AWS_DEV_ACCESS_KEY}
            export ECR_IMAGE=${AWS_DEV_ECR_ENDPOINT}:health-apis-service
            export TASK_DEFINITION=$(aws ecs describe-task-definition --task-definition health-apis-service-task-definition --region $AWS_DEFAULT_REGION)
            export NEW_TASK_DEFINITION=$(echo $TASK_DEFINITION | jq --arg IMAGE $ECR_IMAGE '.taskDefinition | .containerDefinitions[0].image = $IMAGE | del(.taskDefinitionArn) | del(.revision) | del(.status) | del(.requiresAttributes) | del(.compatibilities)')
            echo $NEW_TASK_DEFINITION >> service-task.json
            export NEW_TASK_INFO=$(aws ecs register-task-definition --cli-input-json file://service-task.json --region $AWS_DEFAULT_REGION)
            export NEW_REVISION=$(echo $NEW_TASK_INFO | jq '.taskDefinition.revision')
            aws ecs update-service \
              --cluster apa-apis-cluster \
              --service health-apis-service \
              --task-definition health-apis-service-task-definition:$NEW_REVISION \
              --force-new-deployment
      - run:
          name: This forces the task definition to be re-evaluated and the new container image to be pulled.
          command: |
            export AWS_ACCESS_KEY_ID=${AWS_DEV_KEY_ID}
            export AWS_SECRET_ACCESS_KEY=${AWS_DEV_ACCESS_KEY}
            export ECR_IMAGE=${AWS_DEV_ECR_ENDPOINT}:health-apis-notification
            export TASK_DEFINITION=$(aws ecs describe-task-definition --task-definition health-apis-notification-task-definition --region $AWS_DEFAULT_REGION)
            export NEW_TASK_DEFINITION=$(echo $TASK_DEFINITION | jq --arg IMAGE $ECR_IMAGE '.taskDefinition | .containerDefinitions[0].image = $IMAGE | del(.taskDefinitionArn) | del(.revision) | del(.status) | del(.requiresAttributes) | del(.compatibilities)')
            echo $NEW_TASK_DEFINITION >> notification-task.json
            export NEW_TASK_INFO=$(aws ecs register-task-definition --cli-input-json file://notification-task.json --region $AWS_DEFAULT_REGION)
            export NEW_REVISION=$(echo $NEW_TASK_INFO | jq '.taskDefinition.revision')
            aws ecs update-service \
              --cluster apa-apis-cluster \
              --service health-apis-notification-service \
              --task-definition health-apis-notification-task-definition:$NEW_REVISION \
              --force-new-deployment

  uat-docker-build:
    docker:
      - image: docker:stable
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: false
      - attach_workspace:
          at: ~/project
      - run:
          name: Install dependencies
          command: |
            apk add --no-cache py-pip
            pip install awscli==1.16.114
      - run:
          name: Building docker image
          command: |
            cp -r health-apis-policy/target .
            cp -r health-apis-service/target .
            cp -r health-apis-notification/target .
            export AWS_ACCESS_KEY_ID=${AWS_UAT_KEY_ID}
            export AWS_SECRET_ACCESS_KEY=${AWS_UAT_ACCESS_KEY}
            docker build -f health-apis-policy/Dockerfile -t ${AWS_UAT_ECR_ENDPOINT}:health-apis-policy \
            --build-arg DOCKER_SPRING_PROFILES_ACTIVE=uat \
            --no-cache .
            docker build -f health-apis-service/Dockerfile -t ${AWS_UAT_ECR_ENDPOINT}:health-apis-service \
            --build-arg DOCKER_SPRING_PROFILES_ACTIVE=uat \
            --no-cache .
            docker build -f health-apis-notification/Dockerfile -t ${AWS_UAT_ECR_ENDPOINT}:health-apis-notification \
            --build-arg DOCKER_SPRING_PROFILES_ACTIVE=uat \
            --no-cache .
            login=$(aws ecr get-login --no-include-email --region eu-west-1)
            ${login}
            docker push ${AWS_UAT_ECR_ENDPOINT}:health-apis-policy
            docker push ${AWS_UAT_ECR_ENDPOINT}:health-apis-service
            docker push ${AWS_UAT_ECR_ENDPOINT}:health-apis-notification

  uat-docker-deploy:
    docker:
      - image: docker:stable
    steps:
      - run:
          name: Provision Built Image From ECR to ECS
          command: |
            apk add --no-cache py-pip
            apk add --no-cache jq
            pip install awscli==1.16.114
      - run:
          name: This forces the task definition to be re-evaluated and the new container image to be pulled.
          command: |
            export AWS_ACCESS_KEY_ID=${AWS_UAT_KEY_ID}
            export AWS_SECRET_ACCESS_KEY=${AWS_UAT_ACCESS_KEY}
            export ECR_IMAGE=${AWS_UAT_ECR_ENDPOINT}:health-apis-policy
            export TASK_DEFINITION=$(aws ecs describe-task-definition --task-definition health-apis-policy-task-definition --region $AWS_DEFAULT_REGION)
            export NEW_TASK_DEFINITION=$(echo $TASK_DEFINITION | jq --arg IMAGE $ECR_IMAGE '.taskDefinition | .containerDefinitions[0].image = $IMAGE | del(.taskDefinitionArn) | del(.revision) | del(.status) | del(.requiresAttributes) | del(.compatibilities)')
            echo $NEW_TASK_DEFINITION >> policy-task.json
            export NEW_TASK_INFO=$(aws ecs register-task-definition --cli-input-json file://policy-task.json --region $AWS_DEFAULT_REGION)
            export NEW_REVISION=$(echo $NEW_TASK_INFO | jq '.taskDefinition.revision')
            aws ecs update-service \
              --cluster apa-apis-cluster \
              --service health-apis-policy-service \
              --task-definition health-apis-policy-task-definition:$NEW_REVISION \
              --force-new-deployment
      - run:
          name: This forces the task definition to be re-evaluated and the new container image to be pulled.
          command: |
            export AWS_ACCESS_KEY_ID=${AWS_UAT_KEY_ID}
            export AWS_SECRET_ACCESS_KEY=${AWS_UAT_ACCESS_KEY}
            export ECR_IMAGE=${AWS_UAT_ECR_ENDPOINT}:health-apis-service
            export TASK_DEFINITION=$(aws ecs describe-task-definition --task-definition health-apis-service-task-definition --region $AWS_DEFAULT_REGION)
            export NEW_TASK_DEFINITION=$(echo $TASK_DEFINITION | jq --arg IMAGE $ECR_IMAGE '.taskDefinition | .containerDefinitions[0].image = $IMAGE | del(.taskDefinitionArn) | del(.revision) | del(.status) | del(.requiresAttributes) | del(.compatibilities)')
            echo $NEW_TASK_DEFINITION >> service-task.json
            export NEW_TASK_INFO=$(aws ecs register-task-definition --cli-input-json file://service-task.json --region $AWS_DEFAULT_REGION)
            export NEW_REVISION=$(echo $NEW_TASK_INFO | jq '.taskDefinition.revision')
            aws ecs update-service \
              --cluster apa-apis-cluster \
              --service health-apis-service \
              --task-definition health-apis-service-task-definition:$NEW_REVISION \
              --force-new-deployment
      - run:
          name: This forces the task definition to be re-evaluated and the new container image to be pulled.
          command: |
            export AWS_ACCESS_KEY_ID=${AWS_UAT_KEY_ID}
            export AWS_SECRET_ACCESS_KEY=${AWS_UAT_ACCESS_KEY}
            export ECR_IMAGE=${AWS_UAT_ECR_ENDPOINT}:health-apis-notification
            export TASK_DEFINITION=$(aws ecs describe-task-definition --task-definition health-apis-notification-task-definition --region $AWS_DEFAULT_REGION)
            export NEW_TASK_DEFINITION=$(echo $TASK_DEFINITION | jq --arg IMAGE $ECR_IMAGE '.taskDefinition | .containerDefinitions[0].image = $IMAGE | del(.taskDefinitionArn) | del(.revision) | del(.status) | del(.requiresAttributes) | del(.compatibilities)')
            echo $NEW_TASK_DEFINITION >> notification-task.json
            export NEW_TASK_INFO=$(aws ecs register-task-definition --cli-input-json file://notification-task.json --region $AWS_DEFAULT_REGION)
            export NEW_REVISION=$(echo $NEW_TASK_INFO | jq '.taskDefinition.revision')
            aws ecs update-service \
              --cluster apa-apis-cluster \
              --service health-apis-notification-service \
              --task-definition health-apis-notification-task-definition:$NEW_REVISION \
              --force-new-deployment

  prod-docker-build:
    docker:
      - image: docker:stable
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: false
      - attach_workspace:
          at: ~/project
      - run:
          name: Install dependencies
          command: |
            apk add --no-cache py-pip
            pip install awscli==1.16.114
      - run:
          name: Building docker image
          command: |
            cp -r health-apis-policy/target .
            cp -r health-apis-service/target .
            cp -r health-apis-notification/target .
            export AWS_ACCESS_KEY_ID=${AWS_PROD_KEY_ID}
            export AWS_SECRET_ACCESS_KEY=${AWS_PROD_ACCESS_KEY}
            docker build -f health-apis-policy/Dockerfile -t ${AWS_PROD_ECR_ENDPOINT}:health-apis-policy \
            --build-arg DOCKER_SPRING_PROFILES_ACTIVE=prod \
            --no-cache .
            docker build -f health-apis-service/Dockerfile -t ${AWS_PROD_ECR_ENDPOINT}:health-apis-service \
            --build-arg DOCKER_SPRING_PROFILES_ACTIVE=prod \
            --no-cache .
            docker build -f health-apis-notification/Dockerfile -t ${AWS_PROD_ECR_ENDPOINT}:health-apis-notification \
            --build-arg DOCKER_SPRING_PROFILES_ACTIVE=prod \
            --no-cache .

            login=$(aws ecr get-login --no-include-email --region eu-west-1)
            ${login}
            docker push ${AWS_PROD_ECR_ENDPOINT}:health-apis-policy
            docker push ${AWS_PROD_ECR_ENDPOINT}:health-apis-service
            docker push ${AWS_PROD_ECR_ENDPOINT}:health-apis-notification

  prod-docker-deploy:
    docker:
      - image: docker:stable
    steps:
      - run:
          name: Provision Built Image From ECR to ECS
          command: |
            apk add --no-cache py-pip
            apk add --no-cache jq
            pip install awscli==1.16.114
      - run:
          name: This forces the task definition to be re-evaluated and the new container image to be pulled.
          command: |
            export AWS_ACCESS_KEY_ID=${AWS_PROD_KEY_ID}
            export AWS_SECRET_ACCESS_KEY=${AWS_PROD_ACCESS_KEY}
            export ECR_IMAGE=${AWS_PROD_ECR_ENDPOINT}:health-apis-policy
            export TASK_DEFINITION=$(aws ecs describe-task-definition --task-definition health-apis-policy-task-definition --region $AWS_DEFAULT_REGION)
            export NEW_TASK_DEFINITION=$(echo $TASK_DEFINITION | jq --arg IMAGE $ECR_IMAGE '.taskDefinition | .containerDefinitions[0].image = $IMAGE | del(.taskDefinitionArn) | del(.revision) | del(.status) | del(.requiresAttributes) | del(.compatibilities)')
            echo $NEW_TASK_DEFINITION >> policy-task.json
            export NEW_TASK_INFO=$(aws ecs register-task-definition --cli-input-json file://policy-task.json --region $AWS_DEFAULT_REGION)
            export NEW_REVISION=$(echo $NEW_TASK_INFO | jq '.taskDefinition.revision')
            aws ecs update-service \
              --cluster apa-apis-cluster \
              --service health-apis-policy-service \
              --task-definition health-apis-policy-task-definition:$NEW_REVISION \
              --force-new-deployment
      - run:
          name: This forces the task definition to be re-evaluated and the new container image to be pulled.
          command: |
            export AWS_ACCESS_KEY_ID=${AWS_PROD_KEY_ID}
            export AWS_SECRET_ACCESS_KEY=${AWS_PROD_ACCESS_KEY}
            export ECR_IMAGE=${AWS_PROD_ECR_ENDPOINT}:health-apis-service
            export TASK_DEFINITION=$(aws ecs describe-task-definition --task-definition health-apis-service-task-definition --region $AWS_DEFAULT_REGION)
            export NEW_TASK_DEFINITION=$(echo $TASK_DEFINITION | jq --arg IMAGE $ECR_IMAGE '.taskDefinition | .containerDefinitions[0].image = $IMAGE | del(.taskDefinitionArn) | del(.revision) | del(.status) | del(.requiresAttributes) | del(.compatibilities)')
            echo $NEW_TASK_DEFINITION >> service-task.json
            export NEW_TASK_INFO=$(aws ecs register-task-definition --cli-input-json file://service-task.json --region $AWS_DEFAULT_REGION)
            export NEW_REVISION=$(echo $NEW_TASK_INFO | jq '.taskDefinition.revision')
            aws ecs update-service \
              --cluster apa-apis-cluster \
              --service health-apis-service \
              --task-definition health-apis-service-task-definition:$NEW_REVISION \
              --force-new-deployment
      - run:
          name: This forces the task definition to be re-evaluated and the new container image to be pulled.
          command: |
            export AWS_ACCESS_KEY_ID=${AWS_PROD_KEY_ID}
            export AWS_SECRET_ACCESS_KEY=${AWS_PROD_ACCESS_KEY}
            export ECR_IMAGE=${AWS_PROD_ECR_ENDPOINT}:health-apis-notification
            export TASK_DEFINITION=$(aws ecs describe-task-definition --task-definition health-apis-notification-task-definition --region $AWS_DEFAULT_REGION)
            export NEW_TASK_DEFINITION=$(echo $TASK_DEFINITION | jq --arg IMAGE $ECR_IMAGE '.taskDefinition | .containerDefinitions[0].image = $IMAGE | del(.taskDefinitionArn) | del(.revision) | del(.status) | del(.requiresAttributes) | del(.compatibilities)')
            echo $NEW_TASK_DEFINITION >> notification-task.json
            export NEW_TASK_INFO=$(aws ecs register-task-definition --cli-input-json file://notification-task.json --region $AWS_DEFAULT_REGION)
            export NEW_REVISION=$(echo $NEW_TASK_INFO | jq '.taskDefinition.revision')
            aws ecs update-service \
              --cluster apa-apis-cluster \
              --service health-apis-notification-service \
              --task-definition health-apis-notification-task-definition:$NEW_REVISION \
              --force-new-deployment

workflows:
  version: 2.1
  health-apis-pipeline:
    jobs:
      - test:
          context: 
            - SonarCloud
            - AWS
#          <<: *filter_on_dev
      - build:
          requires:
            - test
#          <<: *filter_on_dev
      - dev-docker-build:
          context: AWS
          requires:
            - build
          <<: *filter_on_dev
      - dev-docker-deploy:
          context: AWS
          requires:
            - dev-docker-build
          <<: *filter_on_dev
      - uat-docker-build:
          context: AWS
          requires:
            - build
          <<: *filter_on_uat
      - uat-docker-deploy:
          context: AWS
          requires:
            - uat-docker-build
          <<: *filter_on_uat
      - prod-build-approval:
          type: approval
          requires:
            - build
          <<: *filter_on_master
      - prod-docker-build:
          context: AWS
          requires:
            - prod-build-approval
          <<: *filter_on_master
      - prod-docker-deploy:
          context: AWS
          requires:
            - prod-docker-build
          <<: *filter_on_master
